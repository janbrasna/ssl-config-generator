# {{output.header}}
# {{{output.link}}}
static_resources:
  listeners:
{{#if form.hsts}}
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                redirect:
                  path_redirect: "/"
                  https_redirect: true
          http_filters:
          - name: envoy.router
            config: {}
{{/if}}
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "example.com"
              routes:
              - match:
                  prefix: "/service/1"
                route:
                  cluster: service1
              require_tls: ALL
{{#if form.hsts}}
            # HSTS ({{output.hstsMaxAge}} seconds)
            response_headers_to_add:
            - header:
                key: "strict-transport-security"
                value: "max-age={{output.hstsMaxAge}}"
              append: false
{{/if}}
          http_filters:
          - name: envoy.router
            typed_config: {}
      tls_context:
        common_tls_context:
          alpn_protocols: h2
          tls_params:
            # modern (set version and we're done)
            #tls_minimum_protocol_version: "TLSv1_3"
            # intermediate
            # tls_minimum_protocol_version: "TLSv1_2"
            # cipher_suites:                                                    ——— TODO:  check tls12 vs tls13 apis?  +ocsp:docs/examples
            # - "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
            # - "[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]"     ——— TODO:  does the sort mean explicit sort preference?
            # - "ECDHE-ECDSA-AES256-GCM-SHA384"
            # - "ECDHE-RSA-AES256-GCM-SHA384"
            # DHE does not appear to be supported in BoringSSL   ————— TODO:  emit boringssl ciphers to envoy configs struct to intersect
            # - "DHE-RSA-AES128-GCM-SHA256"
            # - "DHE-RSA-AES256-GCM-SHA384"
            # old
            tls_minimum_protocol_version: "TLSv1_0"
            cipher_suites:
            - "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
            - "[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]"
            - "ECDHE-ECDSA-AES256-GCM-SHA384"
            - "ECDHE-RSA-AES256-GCM-SHA384"
            # DHE does not appear to be supported in BoringSSL
            # - "DHE-RSA-AES128-GCM-SHA256"
            # - "DHE-RSA-AES256-GCM-SHA384"
            # - "DHE-RSA-CHACHA20-POLY1305"
            # - "ECDHE-ECDSA-AES128-SHA256"
            # - "ECDHE-RSA-AES128-SHA256"
            - "ECDHE-ECDSA-AES128-SHA"
            - "ECDHE-RSA-AES128-SHA"
            # - "ECDHE-ECDSA-AES256-SHA384"
            # - "ECDHE-RSA-AES256-SHA384"
            - "ECDHE-ECDSA-AES256-SHA"
            - "ECDHE-RSA-AES256-SHA"
            # DHE does not appear to be supported in BoringSSL
            # - "DHE-RSA-AES128-SHA256"
            # - "DHE-RSA-AES256-SHA256"
            - "AES128-GCM-SHA256"
            - "AES256-GCM-SHA384"
            # - "AES128-SHA256"
            # - "AES256-SHA256"
            - "AES128-SHA"
            - "AES256-SHA"
            - "DES-CBC3-SHA"
          tls_certificates:
          - certificate_chain:
              filename: "/etc/envoy/certs/server.pem"
            private_key:
              filename: "/etc/envoy/certs/server-key.pem"
          validation_context:
            trusted_ca:
              filename: "/etc/envoy/certs/ca.pem"
            #verify_subject_alt_name: "example.com"
  clusters:
  - name: service1
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: service1
                port_value: 80
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
